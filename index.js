/*
   ====================================================================================================
   ||  DISCORD VOICE LEADERBOARD BOT - (ENHANCED UI VERSION - FIXED AUTO-SAVE)                   ||
   ||--------------------------------------------------------------------------------------------------||
   ||  ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö Replit ‡πÅ‡∏•‡∏∞ Web Interface            ||
   ||  UI/UX: ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏´‡πâ‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô + ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Auto Refresh + Auto-Save ‡∏ó‡∏∏‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ ||
   ====================================================================================================
*/

const {
    Client,
    GatewayIntentBits,
    Collection,
    EmbedBuilder,
    ActionRowBuilder,
    ButtonBuilder,
    ButtonStyle,
    PermissionFlagsBits,
    InteractionResponseType,
    MessageFlags
} = require("discord.js");
const express = require("express");
const { createServer } = require("http");
const { Server } = require("socket.io");
const path = require("path");
const fs = require("fs");

// --- ‚öôÔ∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å Environment Variables ---
const TOKEN = process.env.DISCORD_TOKEN;

if (!TOKEN) {
    console.error("‚ùå CRITICAL ERROR: DISCORD_TOKEN is not set!");
    console.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏° Secrets ‡πÉ‡∏ô Replit: DISCORD_TOKEN");
    process.exit(1);
}

console.log("[REPLIT] üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ö‡∏≠‡∏ó‡πÉ‡∏ô Replit Environment (Multi-Guild Version)");

// --- üé® Color Scheme ‡πÅ‡∏•‡∏∞ Emojis ---
const COLORS = {
    PRIMARY: '#FFD700',      // ‡∏™‡∏µ‡∏ó‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏Å
    SUCCESS: '#10B981',      // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
    WARNING: '#F59E0B',      // ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á
    ERROR: '#EF4444',        // ‡πÅ‡∏î‡∏á
    GOLD: '#FFD700',         // ‡∏ó‡∏≠‡∏á
    SILVER: '#C0C0C0',       // ‡πÄ‡∏á‡∏¥‡∏ô
    BRONZE: '#CD7F32',       // ‡∏ó‡∏≠‡∏á‡πÅ‡∏î‡∏á
    GRADIENT: '#FFA500'      // ‡∏™‡∏µ‡∏ó‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏¥‡πÄ‡∏®‡∏©
};

const EMOJIS = {
    CROWN: 'üëë',
    MIC: 'üé§',
    TROPHY: 'üèÜ',
    STAR: '‚≠ê',
    FIRE: 'üî•',
    DIAMOND: 'üíé',
    ROCKET: 'üöÄ',
    SPARKLES: '‚ú®',
    CHART: 'üìä',
    TIME: '‚è∞',
    ONLINE: 'üü¢',
    OFFLINE: '‚ö™',
    VOICE_ON: 'üîä',
    VOICE_OFF: 'üîá',
    ARROW_UP: 'üìà',
    MEDAL_1: 'ü•á',
    MEDAL_2: 'ü•à',
    MEDAL_3: 'ü•â',
    SAVE: 'üíæ'
};

// --- ü§ñ ‡∏Ñ‡∏•‡∏≤‡∏™‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó ---
class VoiceChatLeaderboard {
    constructor(io) {
        this.io = io;
        this.client = new Client({
            intents: [
                GatewayIntentBits.Guilds,
                GatewayIntentBits.GuildVoiceStates,
                GatewayIntentBits.GuildMembers,
            ],
        });

        this.guildsData = new Collection();
        this.dataDir = path.join(__dirname, "data");
        this.isReady = false;
        this.refreshInterval = null;
        this.autoSaveInterval = null; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Auto-save
        this.lastSaveTime = new Date(); // ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà save ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        this.pendingSaves = new Set(); // ‡πÄ‡∏Å‡πá‡∏ö guild ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏≠ save

        this.initializeDataDirectory();
        this.loadAllGuildsData();
        this.setupEvents();
    }

    // --- üìÅ ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πÄ‡∏£‡∏Å‡∏ó‡∏≠‡∏£‡∏µ‡πÅ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ---
    initializeDataDirectory() {
        if (!fs.existsSync(this.dataDir)) {
            fs.mkdirSync(this.dataDir, { recursive: true });
            console.log(`[DATA] üìÅ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏î‡πÄ‡∏£‡∏Å‡∏ó‡∏≠‡∏£‡∏µ‡∏´‡∏•‡∏±‡∏Å '${this.dataDir}' ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`);
        }
    }

    loadAllGuildsData() {
        try {
            const guildFolders = fs.readdirSync(this.dataDir, { withFileTypes: true })
                .filter(dirent => dirent.isDirectory())
                .map(dirent => dirent.name);

            for (const guildId of guildFolders) {
                const voiceDataPath = path.join(this.dataDir, guildId, "voicedata.json");
                const configPath = path.join(this.dataDir, guildId, "config.json");

                let voiceData = new Collection();
                let config = { leaderboardChannelId: null, leaderboardMessageId: null };

                if (fs.existsSync(voiceDataPath)) {
                    const data = JSON.parse(fs.readFileSync(voiceDataPath, "utf-8"));
                    voiceData = new Collection(data);
                }
                if (fs.existsSync(configPath)) {
                    config = JSON.parse(fs.readFileSync(configPath, "utf-8"));
                }

                this.guildsData.set(guildId, { voiceData, config });
            }
            console.log(`[DATA] üìä ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ${this.guildsData.size} ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
        } catch (error) {
            console.error("‚ùå Error loading guilds data:", error);
        }
    }

    saveGuildData(guildId, force = false) {
        try {
            const guildData = this.guildsData.get(guildId);
            if (!guildData) return;

            const guildDir = path.join(this.dataDir, guildId);
            if (!fs.existsSync(guildDir)) {
                fs.mkdirSync(guildDir, { recursive: true });
            }

            const voiceDataToSave = Array.from(guildData.voiceData.entries());
            fs.writeFileSync(path.join(guildDir, "voicedata.json"), JSON.stringify(voiceDataToSave, null, 2));

            const configToSave = guildData.config;
            fs.writeFileSync(path.join(guildDir, "config.json"), JSON.stringify(configToSave, null, 2));

            if (force) {
                console.log(`[SAVE] ${EMOJIS.SAVE} ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå ${guildId} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (Force Save)`);
            }
        } catch (error) {
            console.error(`‚ùå Error saving data for guild ${guildId}:`, error);
        }
    }

    // --- üîÑ ‡∏£‡∏∞‡∏ö‡∏ö Auto-save ‡πÉ‡∏´‡∏°‡πà (‡∏ó‡∏∏‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ) ---
    startAutoSave() {
        console.log(`[AUTO-SAVE] ${EMOJIS.SAVE} ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö Auto-save ‡∏ó‡∏∏‡∏Å 1 ‡∏ô‡∏≤‡∏ó‡∏µ`);

        // ‡∏•‡πâ‡∏≤‡∏á interval ‡πÄ‡∏Å‡πà‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        if (this.autoSaveInterval) {
            clearInterval(this.autoSaveInterval);
        }

        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Auto-save ‡∏ó‡∏∏‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ (300,000 ms)
        this.autoSaveInterval = setInterval(() => {
            this.performAutoSave();
        }, 1 * 60 * 1000);

        console.log(`[AUTO-SAVE] ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Auto-save ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ (‡∏ó‡∏∏‡∏Å 1 ‡∏ô‡∏≤‡∏ó‡∏µ)`);
    }

    async performAutoSave() {
        if (!this.isReady) {
            console.log(`[AUTO-SAVE] ‚è≥ ‡∏ö‡∏≠‡∏ó‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° ‡∏Ç‡πâ‡∏≤‡∏° auto-save`);
            return;
        }

        const startTime = Date.now();
        let savedCount = 0;
        let activeVoiceUsers = 0;

        console.log(`[AUTO-SAVE] ${EMOJIS.SAVE} ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Auto-save ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∏‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå...`);

        try {
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Voice Channel ‡∏Å‡πà‡∏≠‡∏ô save
            for (const [guildId, guildData] of this.guildsData.entries()) {
                const guild = this.client.guilds.cache.get(guildId);
                if (!guild) continue;

                const now = Date.now();
                let hasChanges = false;

                // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Voice
                for (const [userId, userData] of guildData.voiceData.entries()) {
                    if (userData.isInVoice && userData.joinTime) {
                        const sessionTime = now - userData.joinTime;
                        userData.totalTime += sessionTime;
                        userData.joinTime = now; // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà
                        hasChanges = true;
                        activeVoiceUsers++;
                    }
                }

                // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô pendingSaves
                if (hasChanges || this.pendingSaves.has(guildId)) {
                    this.saveGuildData(guildId, true);
                    this.pendingSaves.delete(guildId);
                    savedCount++;

                    // ‡∏£‡∏≠‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
                    await new Promise(resolve => setTimeout(resolve, 100));
                }
            }

            const timeTaken = Date.now() - startTime;
            this.lastSaveTime = new Date();

            console.log(`[AUTO-SAVE] ‚úÖ Auto-save ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${savedCount} ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå, ${activeVoiceUsers} ‡∏Ñ‡∏ô‡πÉ‡∏ô Voice, ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ ${timeTaken}ms`);

            // ‡∏™‡πà‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£ save ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Web Interface
            this.io.emit("saveStatus", {
                timestamp: this.lastSaveTime.getTime(),
                savedGuilds: savedCount,
                activeVoiceUsers: activeVoiceUsers,
                timeTaken: timeTaken
            });

        } catch (error) {
            console.error(`[AUTO-SAVE] ‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô Auto-save:`, error);
        }
    }

    ensureGuildData(guildId) {
        if (!this.guildsData.has(guildId)) {
            this.guildsData.set(guildId, {
                voiceData: new Collection(),
                config: { leaderboardChannelId: null, leaderboardMessageId: null }
            });
        }
        return this.guildsData.get(guildId);
    }

    // --- üéß ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Events (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß) ---
    setupEvents() {
        this.client.once("ready", async () => {
            console.log(`[BOT] ‚úÖ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß: ${this.client.user?.tag || 'Unknown'}`);
            this.isReady = true;

            // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            this.client.guilds.cache.forEach(guild => {
                this.ensureGuildData(guild.id);
                console.log(`[GUILD] üè† ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå: ${guild.name} (${guild.id})`);
            });

            // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏≠‡∏ó
            if (this.client.user) {
                this.client.user.setPresence({
                    activities: [{ name: `${EMOJIS.MIC} Voice Leaderboards | ${this.client.guilds.cache.size} servers`, type: 3 }],
                    status: 'online',
                });
            }

            // ‡∏£‡∏≠ 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏£‡∏¥‡πà‡∏° auto-refresh ‡πÅ‡∏•‡∏∞ auto-save
            console.log(`[SYSTEM] ‚è≥ ‡∏£‡∏≠ 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥...`);
            setTimeout(() => {
                this.startAutoRefresh();
                this.startAutoSave(); // ‡πÄ‡∏£‡∏¥‡πà‡∏° Auto-save
                this.broadcastToWeb();
            }, 10000);

            console.log(`[BOT] üéâ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô ${this.client.guilds.cache.size} ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå!`);
        });

        // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ñ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤/‡∏≠‡∏≠‡∏Å Voice Channel (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß)
        this.client.on("voiceStateUpdate", (oldState, newState) => {
            if (newState.member?.user.bot) return; // ‡πÑ‡∏°‡πà‡∏ô‡∏±‡∏ö‡∏ö‡∏≠‡∏ó

            const guildId = newState.guild.id;
            const guildData = this.ensureGuildData(guildId);
            const userId = newState.id;
            const now = Date.now();
            const userData = guildData.voiceData.get(userId) || {
                totalTime: 0,
                joinTime: null,
                isInVoice: false,
                username: newState.member.user.username,
                displayName: newState.member.displayName,
                avatarURL: newState.member.user.displayAvatarURL({ size: 64 })
            };

            // ‡πÄ‡∏Ç‡πâ‡∏≤ Voice Channel
            if (newState.channelId && newState.channelId !== oldState.channelId) {
                userData.joinTime = now;
                userData.isInVoice = true;
                console.log(`[VOICE] üîä ${newState.member.displayName} ‡πÄ‡∏Ç‡πâ‡∏≤ Voice Channel ‡πÉ‡∏ô ${newState.guild.name}`);

                // ‡πÄ‡∏û‡∏¥‡πà‡∏° guild ‡πÉ‡∏ô pending saves
                this.pendingSaves.add(guildId);
            } 
            // ‡∏≠‡∏≠‡∏Å Voice Channel
            else if (oldState.channelId && !newState.channelId) {
                if (userData.joinTime) {
                    const sessionTime = now - userData.joinTime;
                    userData.totalTime += sessionTime;
                    userData.joinTime = null;
                    userData.isInVoice = false;
                    console.log(`[VOICE] üîá ${newState.member.displayName} ‡∏≠‡∏≠‡∏Å Voice Channel (‡πÄ‡∏ß‡∏•‡∏≤‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏µ‡πâ: ${this._formatTime(sessionTime)})`);

                    // ‡πÄ‡∏û‡∏¥‡πà‡∏° guild ‡πÉ‡∏ô pending saves
                    this.pendingSaves.add(guildId);

                    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ñ‡∏ô‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Voice
                    this.saveGuildData(guildId, true);
                    console.log(`[SAVE] ${EMOJIS.SAVE} ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Voice`);
                }
            }

            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
            userData.username = newState.member.user.username;
            userData.displayName = newState.member.displayName;
            userData.avatarURL = newState.member.user.displayAvatarURL({ size: 64 });
            guildData.voiceData.set(userId, userData);

            // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä leaderboard ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á Voice State
            setTimeout(() => {
                this.updateDiscordLeaderboard(guildId);
                this.broadcastToWeb();
            }, 1000);
        });

        // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÅ‡∏•‡∏∞‡∏õ‡∏∏‡πà‡∏°
        this.client.on("interactionCreate", async (interaction) => {
            if (!interaction.inGuild()) return;

            try {
                if (interaction.isChatInputCommand()) {
                    await this.handleSlashCommand(interaction);
                } else if (interaction.isButton()) {
                    await this.handleButton(interaction);
                }
            } catch (error) {
                console.error("[INTERACTION ERROR]", error);
                if (!interaction.replied && !interaction.deferred) {
                    await interaction.reply({
                        content: "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà",
                        flags: MessageFlags.Ephemeral
                    }).catch(() => {});
                }
            }
        });

        // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏ó‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà
        this.client.on("guildCreate", (guild) => {
            console.log(`[GUILD] ‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà: ${guild.name} (${guild.id})`);
            this.ensureGuildData(guild.id);
        });

        // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏ó‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
        this.client.on("guildDelete", (guild) => {
            console.log(`[GUILD] ‚ûñ ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå: ${guild.name} (${guild.id})`);
        });
    }

    // --- üîÑ ‡∏£‡∏∞‡∏ö‡∏ö Auto-refresh ‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß ---
    startAutoRefresh() {
        console.log(`[REFRESH] üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö Auto-refresh Leaderboard`);

        // ‡∏•‡πâ‡∏≤‡∏á interval ‡πÄ‡∏Å‡πà‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        if (this.refreshInterval) {
            clearInterval(this.refreshInterval);
        }

        // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä leaderboard ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        this.updateAllDiscordLeaderboards();

        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ interval ‡πÉ‡∏´‡∏°‡πà (‡∏ó‡∏∏‡∏Å 3 ‡∏ô‡∏≤‡∏ó‡∏µ)
        this.refreshInterval = setInterval(() => {
            if (this.isReady) {
                console.log(`[REFRESH] üîÑ Auto-refresh Leaderboards...`);
                this.updateAllDiscordLeaderboards();
            }
        }, 1 * 60 * 1000); // 3 ‡∏ô‡∏≤‡∏ó‡∏µ

        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Web broadcast (‡∏ó‡∏∏‡∏Å 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
        setInterval(() => {
            if (this.isReady) {
                this.broadcastToWeb();
            }
        }, 30 * 1000);

        console.log(`[REFRESH] ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Auto-refresh ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ (‡∏ó‡∏∏‡∏Å 1 ‡∏ô‡∏≤‡∏ó‡∏µ)`);
    }

    // --- üîÑ ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Leaderboard ‡∏ó‡∏∏‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå ---
    async updateAllDiscordLeaderboards() {
        if (!this.isReady || !this.client?.user) {
            console.log("[REFRESH] ‚è≥ ‡∏ö‡∏≠‡∏ó‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° ‡∏Ç‡πâ‡∏≤‡∏° auto-refresh");
            return;
        }

        console.log(`[REFRESH] üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Leaderboard ‡πÉ‡∏ô ${this.guildsData.size} ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå...`);
        let updateCount = 0;

        for (const [guildId, guildData] of this.guildsData.entries()) {
            if (guildData.config.leaderboardChannelId) {
                try {
                    const guild = this.client.guilds.cache.get(guildId);
                    if (guild) {
                        await this.updateDiscordLeaderboard(guildId, guildData);
                        updateCount++;
                        // ‡∏£‡∏≠‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
                        await new Promise(resolve => setTimeout(resolve, 1000));
                    }
                } catch (error) {
                    console.error(`[REFRESH] ‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå ${guildId}:`, error.message);
                }
            }
        }

        console.log(`[REFRESH] ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Leaderboard ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ${updateCount} ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå`);
    }

    // --- üîÑ ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Leaderboard ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß) ---
    async updateDiscordLeaderboard(guildId, guildData = null) {
        if (!this.isReady) return;

        try {
            const guild = this.client.guilds.cache.get(guildId);
            if (!guild) {
                console.log(`[REFRESH] ‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå ${guildId}`);
                return;
            }

            if (!guildData) {
                guildData = this.guildsData.get(guildId);
            }

            if (!guildData?.config?.leaderboardChannelId) {
                console.log(`[REFRESH] ‚ö†Ô∏è ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå ${guild.name} ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Leaderboard Channel`);
                return;
            }

            const channel = guild.channels.cache.get(guildData.config.leaderboardChannelId);
            if (!channel) {
                console.log(`[REFRESH] ‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö Channel ${guildData.config.leaderboardChannelId} ‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå ${guild.name}`);
                guildData.config.leaderboardChannelId = null;
                guildData.config.leaderboardMessageId = null;
                this.saveGuildData(guildId);
                return;
            }

            // ‡∏™‡∏£‡πâ‡∏≤‡∏á Mock Interaction ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö auto-refresh
            const mockInteraction = {
                user: this.client.user,
                guild: guild
            };

            const payload = await this._createLeaderboardPayload(guild, 0, mockInteraction);

            // ‡∏•‡∏≠‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Å‡πà‡∏≤
            if (guildData.config.leaderboardMessageId) {
                try {
                    const message = await channel.messages.fetch(guildData.config.leaderboardMessageId);
                    await message.edit(payload);
                    console.log(`[REFRESH] ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Leaderboard ‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå ${guild.name}`);
                    return;
                } catch (error) {
                    console.log(`[REFRESH] ‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Å‡πà‡∏≤ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà...`);
                }
            }

            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà
            const newMessage = await channel.send(payload);
            guildData.config.leaderboardMessageId = newMessage.id;
            this.saveGuildData(guildId);
            console.log(`[REFRESH] ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Leaderboard ‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå ${guild.name}`);

        } catch (error) {
            console.error(`[REFRESH] ‚ùå Error updating leaderboard for guild ${guildId}:`, error);

            // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô error ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå ‡πÉ‡∏´‡πâ‡∏•‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
            if (error.code === 50001 || error.code === 50013 || error.code === 10003) {
                const guildData = this.guildsData.get(guildId);
                if (guildData) {
                    guildData.config.leaderboardChannelId = null;
                    guildData.config.leaderboardMessageId = null;
                    this.saveGuildData(guildId);
                    console.log(`[REFRESH] üîÑ ‡∏•‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Leaderboard ‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå ${guildId} ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå`);
                }
            }
        }
    }

    // --- üí¨ ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ---
    async handleSlashCommand(interaction) {
        if (!this.isReady) {
            const errorEmbed = new EmbedBuilder()
                .setTitle(`${EMOJIS.TIME} ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô`)
                .setDescription("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà ‡∏ö‡∏≠‡∏ó‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°...")
                .setColor(COLORS.WARNING);
            return interaction.reply({ embeds: [errorEmbed], flags: MessageFlags.Ephemeral });
        }

        const { commandName } = interaction;
        console.log(`[COMMAND] üí¨ ${interaction.user.username} ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á /${commandName} ‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå ${interaction.guild.name}`);

        switch (commandName) {
            case "leaderboard": await this.showDiscordLeaderboard(interaction, 0); break;
            case "mytime": await this.showUserTime(interaction); break;
            case "setleaderboard": await this.setLeaderboardChannel(interaction); break;
            case "resetleaderboard": await this.resetLeaderboard(interaction); break;
            case "voicestats": await this.showVoiceStats(interaction); break;
            case "top": await this.showTopUsers(interaction); break;
            case "web": await this.showWebInterface(interaction); break;
            case "showallmembers": await this.showAllMembers(interaction); break;
            case "savestatus": await this.showSaveStatus(interaction); break; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡∏°‡πà
        }
    }

    async handleButton(interaction) {
        if (!this.isReady) {
            const errorEmbed = new EmbedBuilder()
                .setTitle(`${EMOJIS.TIME} ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô`)
                .setDescription("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà...")
                .setColor(COLORS.WARNING);
            return interaction.reply({ embeds: [errorEmbed], flags: MessageFlags.Ephemeral });
        }

        const [action, pageStr] = interaction.customId.split("_");
        if (action !== "lb") return;

        if (pageStr === "refresh") {
            const currentEmbed = interaction.message.embeds[0];
            const footerText = currentEmbed.footer?.text || "";
            const pageMatch = footerText.match(/‡∏´‡∏ô‡πâ‡∏≤ (\d+)/);
            const currentPage = pageMatch ? parseInt(pageMatch[1]) - 1 : 0;
            await this.showDiscordLeaderboard(interaction, currentPage, true);
        } else {
            const page = parseInt(pageStr);
            await this.showDiscordLeaderboard(interaction, page, true);
        }
    }

    // --- üìä ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£ Save ---
    async showSaveStatus(interaction) {
        const embed = new EmbedBuilder()
            .setTitle(`${EMOJIS.SAVE} ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•`)
            .setDescription(`${EMOJIS.DIAMOND} **‡∏£‡∏∞‡∏ö‡∏ö Auto-Save** ${EMOJIS.SPARKLES}`)
            .setColor(COLORS.SUCCESS)
            .addFields(
                {
                    name: `${EMOJIS.TIME} ‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î`,
                    value: `**${this.lastSaveTime.toLocaleString('th-TH')}**`,
                    inline: true
                },
                {
                    name: `${EMOJIS.CHART} ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å`,
                    value: `**${this.pendingSaves.size}** ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå`,
                    inline: true
                },
                {
                    name: `${EMOJIS.ROCKET} ‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ`,
                    value: `‡∏†‡∏≤‡∏¢‡πÉ‡∏ô **1 ‡∏ô‡∏≤‡∏ó‡∏µ**`,
                    inline: true
                }
            )
            .setFooter({
                text: `${EMOJIS.SAVE} Auto-Save ‡∏ó‡∏∏‡∏Å 1 ‡∏ô‡∏≤‡∏ó‡∏µ | ${new Date().toLocaleDateString('th-TH')}`,
                iconURL: interaction.user.displayAvatarURL()
            })
            .setTimestamp();

        await interaction.reply({ embeds: [embed], flags: MessageFlags.Ephemeral });
    }

    // --- üìä ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• Leaderboard ---
    async showDiscordLeaderboard(interaction, page, isUpdate = false) {
        if (isUpdate) {
            await interaction.deferUpdate();
        } else {
            await interaction.deferReply();
        }
        const payload = await this._createLeaderboardPayload(interaction.guild, page, interaction);
        await interaction.editReply(payload);
    }

    // ==============================================================================
    // ||               ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á LEADERBOARD (Gold Theme + Single Line)         ||
    // ==============================================================================
    async _createLeaderboardPayload(guild, page, interaction) {
        if (!this.isReady || !this.client?.user) {
            const errorEmbed = new EmbedBuilder()
                .setTitle(`${EMOJIS.TIME} ‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°`)
                .setDescription("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà...")
                .setColor(COLORS.WARNING);
            return { embeds: [errorEmbed], components: [] };
        }

        const sortedUsers = await this._getSortedLeaderboard(guild.id);
        const itemsPerPage = 20;

        const totalPages = Math.ceil(sortedUsers.length / itemsPerPage) || 1;
        page = Math.max(0, Math.min(page, totalPages - 1));
        const pageUsers = sortedUsers.slice(page * itemsPerPage, (page + 1) * itemsPerPage);

        const totalTimeAllUsers = sortedUsers.reduce((sum, user) => sum + user.currentTotal, 0);
        const activeUsers = sortedUsers.filter(user => user.isInVoice).length;

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á Main Embed
        const embed = new EmbedBuilder()
            .setTitle(`# ${EMOJIS.TROPHY} Voice Chat Leaderboard ${EMOJIS.SPARKLES}`)
            .setColor(COLORS.GOLD)
            .setThumbnail(guild.iconURL({ size: 256 }))
            .setTimestamp();

        // Header Description ‡πÅ‡∏ö‡∏ö‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°
        const headerDescription = [
            `${EMOJIS.DIAMOND} **${guild.name}**`,
            `${EMOJIS.CHART} **‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏ß‡∏°:** ${this._formatTime(totalTimeAllUsers)}`,
            `${EMOJIS.ONLINE} **‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå:** ${activeUsers}/${sortedUsers.length} ‡∏Ñ‡∏ô`,
            `${EMOJIS.FIRE} **‡∏´‡∏ô‡πâ‡∏≤ ${page + 1}/${totalPages}**`,
            `${EMOJIS.SAVE} **‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:** ${this.lastSaveTime.toLocaleTimeString('th-TH')}`
        ].join('\n');

        embed.setDescription(headerDescription);

        if (pageUsers.length === 0) {
            embed.addFields({
                name: `${EMOJIS.TIME} ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•`,
                value: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏Ç‡πâ‡∏≤ Voice Chat",
                inline: false
            });
        } else {
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á Leaderboard List ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà (Single Line + Code Block)
            const leaderboardLines = pageUsers.map((user, index) => {
                const rank = page * itemsPerPage + index + 1;

                let rankDisplay;
                if (rank === 1) rankDisplay = "ü•á";
                else if (rank === 2) rankDisplay = "ü•à";  
                else if (rank === 3) rankDisplay = "ü•â";
                else rankDisplay = `#${rank}`.padEnd(3);

                const statusIcon = user.isInVoice ? EMOJIS.VOICE_ON : EMOJIS.VOICE_OFF;
                const timeFormatted = this._formatTime(user.currentTotal).padStart(15);

                return `${rankDisplay.padEnd(4)} ${statusIcon} ${timeFormatted}`;
            }).join('\n');

            // ‡∏™‡∏£‡πâ‡∏≤‡∏á mention list ‡πÅ‡∏¢‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏≤‡∏Å
            const mentionLines = pageUsers.map((user, index) => {
                const rank = page * itemsPerPage + index + 1;
                let rankEmoji = rank <= 3 ? ['ü•á', 'ü•à', 'ü•â'][rank-1] : `#${rank}`;
                return `${rankEmoji} <@${user.userId}>`;
            }).join('\n');

            embed.addFields(
                {
                    name: `${EMOJIS.TROPHY} ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤`,
                    value: "```md\n" + leaderboardLines + "\n```",
                    inline: true
                },
                {
                    name: `üë• ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ`,
                    value: mentionLines.substring(0, 1024),
                    inline: true
                }
            );
        }

        // Top Player Highlight
        const topUserWithTime = sortedUsers.find(u => u.currentTotal > 0);
        if (page === 0 && topUserWithTime) {
            embed.setAuthor({
                name: `${EMOJIS.CROWN} ‡∏ú‡∏π‡πâ‡∏ô‡∏≥‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: ${topUserWithTime.displayName}`,
                iconURL: topUserWithTime.avatarURL
            });
        }

        // Footer ‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°
        embed.setFooter({
            text: `${EMOJIS.ROCKET} ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï: ${new Date().toLocaleString('th-TH')} ‚Ä¢ ‡∏´‡∏ô‡πâ‡∏≤ ${page + 1}/${totalPages} ‚Ä¢ Auto-Save: ${this.pendingSaves.size} ‡∏£‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å`,
            iconURL: interaction.user.displayAvatarURL({ size: 64 })
        });

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á Action Buttons ‡πÅ‡∏ö‡∏ö‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°
        const row = new ActionRowBuilder().addComponents(
            new ButtonBuilder()
                .setCustomId(`lb_${page - 1}`)
                .setLabel("‚óÄÔ∏è ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤")
                .setStyle(ButtonStyle.Primary)
                .setDisabled(page <= 0),
            new ButtonBuilder()
                .setCustomId("lb_refresh")
                .setLabel(`${EMOJIS.SPARKLES} ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä`)
                .setStyle(ButtonStyle.Success),
            new ButtonBuilder()
                .setCustomId(`lb_${page + 1}`)
                .setLabel("‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ‚ñ∂Ô∏è")
                .setStyle(ButtonStyle.Primary)
                .setDisabled(page >= totalPages - 1),
            new ButtonBuilder()
                .setLabel(`${EMOJIS.ROCKET} Web Interface`)
                .setStyle(ButtonStyle.Link)
                .setURL(process.env.REPL_URL || 'https://replit.com')
        );

        return { embeds: [embed], components: [row] };
    }

    // --- üë§ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ---
    async showUserTime(interaction) {
        const guildId = interaction.guild.id;
        const userId = interaction.user.id;
        const guildData = this.ensureGuildData(guildId);
        const userData = guildData.voiceData.get(userId);

        let totalTime = 0;
        if (userData) {
            totalTime = userData.totalTime;
            if (userData.isInVoice && userData.joinTime) {
                totalTime += Date.now() - userData.joinTime;
            }
        }

        const sortedUsers = await this._getSortedLeaderboard(guildId);
        const userRank = sortedUsers.findIndex(user => user.userId === userId) + 1;
        const totalUsers = sortedUsers.length;
        const percentile = userRank > 0 ? Math.round((1 - (userRank - 1) / totalUsers) * 100) : 0;

        let rankEmoji = EMOJIS.STAR;
        let rankColor = COLORS.PRIMARY;

        if (userRank === 1) {
            rankEmoji = EMOJIS.MEDAL_1;
            rankColor = COLORS.GOLD;
        } else if (userRank === 2) {
            rankEmoji = EMOJIS.MEDAL_2;
            rankColor = COLORS.SILVER;
        } else if (userRank === 3) {
            rankEmoji = EMOJIS.MEDAL_3;
            rankColor = COLORS.BRONZE;
        }

        const embed = new EmbedBuilder()
            .setTitle(`${EMOJIS.TIME} ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ Voice Chat ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì`)
            .setDescription(`${EMOJIS.DIAMOND} **${interaction.user.displayName}**`)
            .setColor(rankColor)
            .setThumbnail(interaction.user.displayAvatarURL({ size: 256 }))
            .addFields(
                {
                    name: `${EMOJIS.TIME} ‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏ß‡∏°`,
                    value: `**${this._formatTime(totalTime)}**`,
                    inline: true
                },
                {
                    name: `${EMOJIS.TROPHY} ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô`,
                    value: userRank > 0 ? `${rankEmoji} **#${userRank}**` : "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö",
                    inline: true
                },
                {
                    name: `${EMOJIS.CHART} ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡πÑ‡∏ó‡∏•‡πå`,
                    value: `**${percentile}%** (‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤ ${percentile}% ‡∏Ç‡∏≠‡∏á‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å)`,
                    inline: true
                }
            )
            .setFooter({
                text: `${EMOJIS.SPARKLES} ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏ì ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${new Date().toLocaleDateString('th-TH')} | ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: ${this.lastSaveTime.toLocaleTimeString('th-TH')}`,
                iconURL: interaction.guild.iconURL()
            })
            .setTimestamp();

        await interaction.reply({ embeds: [embed], flags: MessageFlags.Ephemeral });
    }

    async showWebInterface(interaction) {
        const webUrl = process.env.REPL_URL || 'https://your-repl-name.username.replit.dev';
        const embed = new EmbedBuilder()
            .setTitle(`${EMOJIS.ROCKET} Web Interface ${EMOJIS.SPARKLES}`)
            .setDescription(`‡πÄ‡∏Ç‡πâ‡∏≤‡∏ä‡∏° Leaderboard ‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå!`)
            .setColor(COLORS.SUCCESS)
            .addFields(
                {
                    name: `${EMOJIS.DIAMOND} ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥`,
                    value: [
                        `${EMOJIS.CHART} ‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå`,
                        `${EMOJIS.MIC} ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Voice`,
                        `üì± ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå`,
                        `${EMOJIS.FIRE} ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥`,
                        `${EMOJIS.SAVE} ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∏‡∏Å 1 ‡∏ô‡∏≤‡∏ó‡∏µ`
                    ].join('\n'),
                    inline: false
                }
            )
            .setFooter({
                text: `${EMOJIS.TIME} ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏ä‡∏°`,
                iconURL: this.client.user.displayAvatarURL()
            });

        const row = new ActionRowBuilder().addComponents(
            new ButtonBuilder()
                .setLabel(`${EMOJIS.ROCKET} ‡πÄ‡∏õ‡∏¥‡∏î Web Interface`)
                .setStyle(ButtonStyle.Link)
                .setURL(webUrl)
        );

        await interaction.reply({ embeds: [embed], components: [row] });
    }

    async showAllMembers(interaction) {
        if (!this.isReady) {
            return interaction.reply({ content: "‚è≥ ‡∏ö‡∏≠‡∏ó‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà...", flags: MessageFlags.Ephemeral });
        }

        try {
            const guild = interaction.guild;
            const members = await guild.members.fetch();
            const humanMembers = members.filter(member => !member.user.bot);
            const botMembers = members.filter(member => member.user.bot);

            const embed = new EmbedBuilder()
                .setTitle(`${EMOJIS.DIAMOND} ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î`)
                .setDescription(`**${guild.name}** ${EMOJIS.SPARKLES}`)
                .setColor(COLORS.PRIMARY)
                .setThumbnail(guild.iconURL({ size: 256 }))
                .addFields(
                    {
                        name: `üë• ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏à‡∏£‡∏¥‡∏á (${humanMembers.size} ‡∏Ñ‡∏ô)`,
                        value: humanMembers.size > 0 ? 
                            humanMembers.map(m => `${EMOJIS.STAR} ${m.displayName}`).slice(0, 20).join('\n') + 
                            (humanMembers.size > 20 ? `\n... ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å ${humanMembers.size - 20} ‡∏Ñ‡∏ô` : '') :
                            "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å",
                        inline: false
                    },
                    {
                        name: `ü§ñ ‡∏ö‡∏≠‡∏ó (${botMembers.size} ‡∏ï‡∏±‡∏ß)`,
                        value: botMembers.size > 0 ? 
                            botMembers.map(m => `${EMOJIS.ROCKET} ${m.displayName}`).slice(0, 10).join('\n') + 
                            (botMembers.size > 10 ? `\n... ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å ${botMembers.size - 10} ‡∏ï‡∏±‡∏ß` : '') :
                            "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏≠‡∏ó",
                        inline: false
                    }
                )
                .setFooter({
                    text: `${EMOJIS.CHART} ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${members.size} ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å ‚Ä¢ ${new Date().toLocaleDateString('th-TH')}`,
                    iconURL: interaction.user.displayAvatarURL()
                })
                .setTimestamp();

            await interaction.reply({ embeds: [embed], flags: MessageFlags.Ephemeral });
        } catch (error) {
            console.error('Error fetching members:', error);
            const errorEmbed = new EmbedBuilder()
                .setTitle("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î")
                .setDescription("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÑ‡∏î‡πâ")
                .setColor(COLORS.ERROR);
            await interaction.reply({ embeds: [errorEmbed], flags: MessageFlags.Ephemeral });
        }
    }

    // --- ‚öôÔ∏è ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô ---
    async setLeaderboardChannel(interaction) {
        if (!interaction.member.permissions.has(PermissionFlagsBits.ManageChannels)) {
            const errorEmbed = new EmbedBuilder()
                .setTitle("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå")
                .setDescription("‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå **Manage Channels** ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ")
                .setColor(COLORS.ERROR);
            return interaction.reply({ embeds: [errorEmbed], flags: MessageFlags.Ephemeral });
        }

        const guildId = interaction.guild.id;
        const guildData = this.ensureGuildData(guildId);
        guildData.config.leaderboardChannelId = interaction.channelId;
        guildData.config.leaderboardMessageId = null;
        this.saveGuildData(guildId, true);

        const successEmbed = new EmbedBuilder()
            .setTitle(`${EMOJIS.SUCCESS} ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!`)
            .setDescription(`‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ <#${interaction.channelId}> ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Leaderboard ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß`)
            .setColor(COLORS.SUCCESS)
            .addFields({
                name: `${EMOJIS.CHART} ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•`,
                value: [
                    `${EMOJIS.SPARKLES} Leaderboard ‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ó‡∏∏‡∏Å 1 ‡∏ô‡∏≤‡∏ó‡∏µ`,
                    `${EMOJIS.SAVE} ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ó‡∏∏‡∏Å 1 ‡∏ô‡∏≤‡∏ó‡∏µ`
                ].join('\n'),
                inline: false
            });

        await interaction.reply({ embeds: [successEmbed], flags: MessageFlags.Ephemeral });

        console.log(`[CONFIG] ‚öôÔ∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Leaderboard Channel ‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå ${interaction.guild.name}: ${interaction.channelId}`);

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á leaderboard ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        setTimeout(() => {
            this.updateDiscordLeaderboard(guildId);
        }, 2000);
    }

    async resetLeaderboard(interaction) {
        if (!interaction.member.permissions.has(PermissionFlagsBits.Administrator)) {
            const errorEmbed = new EmbedBuilder()
                .setTitle("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå")
                .setDescription("‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå **Administrator** ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ")
                .setColor(COLORS.ERROR);
            return interaction.reply({ embeds: [errorEmbed], flags: MessageFlags.Ephemeral });
        }

        const guildId = interaction.guild.id;
        const guildData = this.ensureGuildData(guildId);
        const userCount = guildData.voiceData.size;

        guildData.voiceData.clear();
        this.saveGuildData(guildId, true);

        const successEmbed = new EmbedBuilder()
            .setTitle(`${EMOJIS.SUCCESS} ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!`)
            .setDescription(`‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏•‡∏≤ Voice Chat ‡∏Ç‡∏≠‡∏á **${userCount} ‡∏Ñ‡∏ô** ‡πÅ‡∏•‡πâ‡∏ß`)
            .setColor(COLORS.WARNING)
            .addFields({
                name: "‚ö†Ô∏è ‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô",
                value: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡πÑ‡∏î‡πâ",
                inline: false
            })
            .setFooter({
                text: `‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÇ‡∏î‡∏¢: ${interaction.user.username} | ${new Date().toLocaleDateString('th-TH')}`,
                iconURL: interaction.user.displayAvatarURL()
            })
            .setTimestamp();

        await interaction.reply({ embeds: [successEmbed], flags: MessageFlags.Ephemeral });

        console.log(`[RESET] üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Voice Chat ‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå ${interaction.guild.name} (${userCount} ‡∏Ñ‡∏ô)`);

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï leaderboard ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        setTimeout(() => {
            this.updateDiscordLeaderboard(guildId);
        }, 1000);
    }

    async showVoiceStats(interaction) {
        const guildId = interaction.guild.id;
        const sortedUsers = await this._getSortedLeaderboard(guildId);
        const usersWithTime = sortedUsers.filter(u => u.currentTotal > 0);

        const totalUsers = sortedUsers.length;
        const activeUsers = sortedUsers.filter(user => user.isInVoice).length;
        const totalTime = usersWithTime.reduce((sum, user) => sum + user.currentTotal, 0);
        const avgTime = usersWithTime.length > 0 ? totalTime / usersWithTime.length : 0;

        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
        const topUser = usersWithTime[0];
        const participationRate = totalUsers > 0 ? Math.round((usersWithTime.length / totalUsers) * 100) : 0;

        const embed = new EmbedBuilder()
            .setTitle(`${EMOJIS.CHART} ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ Voice Chat ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå`)
            .setDescription(`${EMOJIS.DIAMOND} **${interaction.guild.name}** ${EMOJIS.SPARKLES}`)
            .setColor(COLORS.GOLD)
            .setThumbnail(interaction.guild.iconURL({ size: 256 }))
            .addFields(
                {
                    name: `${EMOJIS.DIAMOND} ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ`,
                    value: [
                        `üë• **‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:** ${totalUsers} ‡∏Ñ‡∏ô`,
                        `${EMOJIS.VOICE_ON} **‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:** ${activeUsers} ‡∏Ñ‡∏ô`,
                        `${EMOJIS.CHART} **‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°:** ${participationRate}%`,
                        `${EMOJIS.TIME} **‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:** ${this._formatTime(totalTime)}`
                    ].join('\n'),
                    inline: false
                },
                {
                    name: `${EMOJIS.TROPHY} ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô`,
                    value: [
                        `üìä **‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ï‡πà‡∏≠‡∏Ñ‡∏ô:** ${this._formatTime(avgTime)}`,
                        `${EMOJIS.CROWN} **‡∏ú‡∏π‡πâ‡∏ô‡∏≥:** ${topUser ? topUser.displayName : '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ'}`,
                        `${EMOJIS.FIRE} **‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î:** ${topUser ? this._formatTime(topUser.currentTotal) : '0 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ'}`,
                        `${EMOJIS.STAR} **‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏Ç‡πâ‡∏≤:** ${usersWithTime.length} ‡∏Ñ‡∏ô`
                    ].join('\n'),
                    inline: false
                },
                {
                    name: `${EMOJIS.SAVE} ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö`,
                    value: [
                        `üìÖ **‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:** ${this.lastSaveTime.toLocaleString('th-TH')}`,
                        `‚è∞ **‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ:** ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 1 ‡∏ô‡∏≤‡∏ó‡∏µ`,
                        `üîÑ **‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å:** ${this.pendingSaves.size} ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå`
                    ].join('\n'),
                    inline: false
                }
            )
            .setFooter({
                text: `${EMOJIS.TIME} ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: ${new Date().toLocaleString('th-TH')}`,
                iconURL: interaction.user.displayAvatarURL()
            })
            .setTimestamp();

        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå
        if (activeUsers > totalUsers * 0.3) {
            embed.setColor(COLORS.SUCCESS);
        } else if (activeUsers > totalUsers * 0.1) {
            embed.setColor(COLORS.WARNING);
        } else {
            embed.setColor(COLORS.ERROR);
        }

        await interaction.reply({ embeds: [embed] });
    }

    async showTopUsers(interaction) {
        const guildId = interaction.guild.id;
        const limit = interaction.options?.getInteger('limit') || 10;
        const sortedUsers = await this._getSortedLeaderboard(guildId);
        const topUsers = sortedUsers.filter(u => u.currentTotal > 0).slice(0, limit);

        const embed = new EmbedBuilder()
            .setTitle(`${EMOJIS.TROPHY} Top ${limit} Voice Chat Champions`)
            .setDescription(`${EMOJIS.FIRE} **Hall of Fame** ${EMOJIS.SPARKLES}`)
            .setColor(COLORS.GOLD)
            .setThumbnail(interaction.guild.iconURL({ size: 256 }))
            .setTimestamp();

        if (topUsers.length === 0) {
            embed.addFields({
                name: `${EMOJIS.TIME} ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•`,
                value: "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Voice Chat",
                inline: false
            });
        } else {
            let description = "";
            for (let i = 0; i < topUsers.length; i++) {
                const user = topUsers[i];
                const rank = i + 1;

                let medalIcon;
                if (rank === 1) {
                    medalIcon = `${EMOJIS.MEDAL_1} ${EMOJIS.CROWN}`;
                } else if (rank === 2) {
                    medalIcon = `${EMOJIS.MEDAL_2} ${EMOJIS.STAR}`;
                } else if (rank === 3) {
                    medalIcon = `${EMOJIS.MEDAL_3} ${EMOJIS.FIRE}`;
                } else if (rank <= 5) {
                    medalIcon = `${EMOJIS.DIAMOND} **#${rank}**`;
                } else {
                    medalIcon = `${EMOJIS.STAR} **#${rank}**`;
                }

                const statusIcon = user.isInVoice ? EMOJIS.VOICE_ON : EMOJIS.VOICE_OFF;
                const timeFormatted = this._formatTime(user.currentTotal);

                description += `${medalIcon} ${statusIcon} **${user.displayName}**\n`;
                description += `${EMOJIS.TIME} ${timeFormatted}\n\n`;
            }

            embed.setDescription(description.substring(0, 2048));
        }

        embed.setFooter({
            text: `${EMOJIS.SPARKLES} ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÇ‡∏î‡∏¢: ${interaction.user.username} ‚Ä¢ ${new Date().toLocaleDateString('th-TH')} ‚Ä¢ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: ${this.lastSaveTime.toLocaleTimeString('th-TH')}`,
            iconURL: interaction.user.displayAvatarURL()
        });

        await interaction.reply({ embeds: [embed] });
    }

    // --- üåê ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ Web Interface (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß) ---
    async broadcastToWeb() {
        if (!this.isReady) return;

        try {
            const allLeaderboards = {};

            for (const [guildId, guildData] of this.guildsData.entries()) {
                const guild = this.client.guilds.cache.get(guildId);
                if (!guild) continue;

                const sortedUsers = await this._getSortedLeaderboard(guildId);

                // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∏‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
                if (sortedUsers.length > 0) {
                    allLeaderboards[guildId] = {
                        guildName: guild.name || 'Unknown Guild',
                        guildIcon: guild.iconURL({ size: 64 }) || null,
                        memberCount: guild.memberCount || 0,
                        activeUsers: sortedUsers.filter(u => u.isInVoice).length,
                        totalTime: sortedUsers.reduce((sum, user) => sum + user.currentTotal, 0),
                        users: sortedUsers.map((user, index) => ({
                            rank: index + 1,
                            userId: user.userId,
                            username: user.username,
                            displayName: user.displayName,
                            avatarURL: user.avatarURL,
                            isInVoice: user.isInVoice,
                            currentTotal: user.currentTotal,
                            timeFormatted: this._formatTime(user.currentTotal)
                        }))
                    };
                }
            }

            // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á Web Interface ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Auto-Save
            this.io.emit("leaderboardUpdate", {
                timestamp: Date.now(),
                botStatus: this.isReady,
                totalGuilds: this.client.guilds.cache.size,
                guilds: allLeaderboards,
                saveStatus: {
                    lastSave: this.lastSaveTime.getTime(),
                    pendingSaves: this.pendingSaves.size,
                    nextSaveIn: 1 * 60 * 1000 // 5 minutes in milliseconds
                }
            });

            console.log(`[WEB] üì° ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ${Object.keys(allLeaderboards).length} ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á Web Interface (‡∏£‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å: ${this.pendingSaves.size})`);

        } catch (error) {
            console.error("[WEB] ‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ Web:", error);
        }
    }

    // --- üõ†Ô∏è ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ---
    async _getSortedLeaderboard(guildId) {
        const guildData = this.ensureGuildData(guildId);
        const now = Date.now();
        const guild = this.client.guilds.cache.get(guildId);
        if (!guild) return [];

        try {
            const allMembers = await guild.members.fetch();

            const allUsers = [];

            for (const [userId, member] of allMembers) {
                if (member.user.bot) continue;

                const voiceData = guildData.voiceData.get(userId);
                let currentTotal = 0;
                let isInVoice = false;

                if (voiceData) {
                    currentTotal = voiceData.totalTime || 0;
                    isInVoice = voiceData.isInVoice || false;
                    if (isInVoice && voiceData.joinTime) {
                        currentTotal += now - voiceData.joinTime;
                    }
                }

                allUsers.push({
                    userId: userId,
                    username: member.user.username,
                    displayName: member.displayName,
                    avatarURL: member.displayAvatarURL({ size: 64 }),
                    isInVoice: isInVoice,
                    currentTotal: currentTotal
                });
            }

            return allUsers.sort((a, b) => b.currentTotal - a.currentTotal);

        } catch (error) {
            console.error(`Error fetching all members for guild ${guildId}:`, error);
            return [];
        }
    }

    _formatTime(ms) {
        if (!ms || ms < 1000) return "0 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ";
        const sec = Math.floor(ms / 1000);
        const min = Math.floor(sec / 60);
        const hrs = Math.floor(min / 60);
 //       const days = Math.floor(hrs / 24);

//        if (days > 0) return `${days} ‡∏ß‡∏±‡∏ô ${hrs % 24} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á`;
        if (hrs > 0) return `${hrs} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ${min % 60} ‡∏ô‡∏≤‡∏ó‡∏µ`;
        if (min > 0) return `${min} ‡∏ô‡∏≤‡∏ó‡∏µ ${sec % 60} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ`;
        return `${sec % 60} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ`;
    }

    // --- üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ö‡∏≠‡∏ó ---
    start() {
        this.client.login(TOKEN);
    }

    // --- üõë ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô (Graceful Shutdown) ---
    shutdown() {
        console.log('\n[SYSTEM] üõë ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö...');

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏õ‡∏¥‡∏î
        console.log(`[SHUTDOWN] ${EMOJIS.SAVE} ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö...`);
        for (const [guildId] of this.guildsData.entries()) {
            this.saveGuildData(guildId, true);
        }

        // ‡∏•‡πâ‡∏≤‡∏á intervals
        if (this.refreshInterval) {
            clearInterval(this.refreshInterval);
            console.log('[SHUTDOWN] üîÑ ‡∏´‡∏¢‡∏∏‡∏î Auto-refresh');
        }

        if (this.autoSaveInterval) {
            clearInterval(this.autoSaveInterval);
            console.log(`[SHUTDOWN] ${EMOJIS.SAVE} ‡∏´‡∏¢‡∏∏‡∏î Auto-save`);
        }

        // ‡∏õ‡∏¥‡∏î‡∏ö‡∏≠‡∏ó
        this.client.destroy();
        console.log('[SHUTDOWN] ü§ñ ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ö‡∏≠‡∏ó');

        console.log('[SHUTDOWN] ‚úÖ ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢');
    }
}

// --- üåê Web Server & Socket.IO Setup ---
const app = express();
const server = createServer(app);
const io = new Server(server, {
    cors: {
        origin: "*",
        methods: ["GET", "POST"]
    }
});

// Static files
app.use(express.static(path.join(__dirname, 'web')));

// Main route
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'web', 'index.html'));
});

// Health check (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß)
app.get('/health', (req, res) => {
    res.json({ 
        status: 'ok', 
        timestamp: new Date().toISOString(),
        uptime: process.uptime(),
        botReady: bot.isReady,
        guildsCount: bot.client.guilds.cache.size,
        lastSave: bot.lastSaveTime.toISOString(),
        pendingSaves: bot.pendingSaves.size
    });
});

// API endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• leaderboard
app.get('/api/leaderboard/:guildId?', async (req, res) => {
    try {
        if (!bot.isReady) {
            return res.status(503).json({ error: 'Bot not ready' });
        }

        const { guildId } = req.params;

        if (guildId) {
            // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
            const guild = bot.client.guilds.cache.get(guildId);
            if (!guild) {
                return res.status(404).json({ error: 'Guild not found' });
            }

            const sortedUsers = await bot._getSortedLeaderboard(guildId);
            res.json({
                guildId,
                guildName: guild.name,
                users: sortedUsers,
                lastUpdate: new Date().toISOString()
            });
        } else {
            // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∏‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
            const allData = {};
            for (const [gId] of bot.guildsData.entries()) {
                const guild = bot.client.guilds.cache.get(gId);
                if (guild) {
                    const users = await bot._getSortedLeaderboard(gId);
                    allData[gId] = {
                        guildName: guild.name,
                        users: users
                    };
                }
            }
            res.json({
                data: allData,
                lastUpdate: new Date().toISOString(),
                lastSave: bot.lastSaveTime.toISOString()
            });
        }
    } catch (error) {
        console.error('API Error:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// Socket.IO Events (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß)
io.on("connection", (socket) => {
    console.log(`[WEB] üåê ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Web Interface (${socket.id})`);

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    if (bot.isReady) {
        bot.broadcastToWeb();

        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Auto-Save
        socket.emit("saveStatus", {
            timestamp: bot.lastSaveTime.getTime(),
            pendingSaves: bot.pendingSaves.size,
            nextSaveIn: 1 * 60 * 1000
        });
    } else {
        // ‡∏™‡πà‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ß‡πà‡∏≤‡∏ö‡∏≠‡∏ó‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°
        socket.emit("botStatus", { 
            isReady: false, 
            message: "‡∏ö‡∏≠‡∏ó‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö..." 
        });
    }

    // ‡∏£‡∏±‡∏ö request ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å client
    socket.on("requestData", () => {
        console.log(`[WEB] üì° Client ‡∏Ç‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (${socket.id})`);
        if (bot.isReady) {
            bot.broadcastToWeb();
        }
    });

    // ‡∏£‡∏±‡∏ö request ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Auto-Save
    socket.on("requestSaveStatus", () => {
        console.log(`[WEB] ${EMOJIS.SAVE} Client ‡∏Ç‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å (${socket.id})`);
        socket.emit("saveStatus", {
            timestamp: bot.lastSaveTime.getTime(),
            pendingSaves: bot.pendingSaves.size,
            nextSaveIn: 1 * 60 * 1000
        });
    });

    // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ disconnect
    socket.on("disconnect", () => {
        console.log(`[WEB] üëã ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô disconnect ‡∏à‡∏≤‡∏Å Web Interface (${socket.id})`);
    });
});

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ö‡∏≠‡∏ó
const bot = new VoiceChatLeaderboard(io);
bot.start();

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Web Server
const PORT = process.env.PORT || 5000;
server.listen(PORT, '0.0.0.0', () => {
    console.log(`[WEB] üöÄ Web Server ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà Port ${PORT}`);
    console.log(`[WEB] üåê URL: ${process.env.REPL_URL || `http://localhost:${PORT}`}`);
    console.log(`[SYSTEM] ${EMOJIS.SAVE} Auto-Save: ‡∏ó‡∏∏‡∏Å 1 ‡∏ô‡∏≤‡∏ó‡∏µ | Auto-Refresh: ‡∏ó‡∏∏‡∏Å 1 ‡∏ô‡∏≤‡∏ó‡∏µ`);
});

// Graceful shutdown (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß)
process.on('SIGINT', () => {
    console.log(`\n[SYSTEM] üõë ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö...`);
    bot.shutdown();
    server.close(() => {
        console.log('[WEB] üåê ‡∏õ‡∏¥‡∏î Web Server ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢');
        process.exit(0);
    });
});

process.on('SIGTERM', () => {
    console.log(`\n[SYSTEM] üõë ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì SIGTERM...`);
    bot.shutdown();
    server.close(() => {
        console.log('[WEB] üåê ‡∏õ‡∏¥‡∏î Web Server ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢');
        process.exit(0);
    });
});

// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ unhandled errors
process.on('unhandledRejection', (reason, promise) => {
    console.error('[ERROR] Unhandled Rejection at:', promise, 'reason:', reason);
});

process.on('uncaughtException', (error) => {
    console.error('[ERROR] Uncaught Exception:', error);
    bot.shutdown();
    process.exit(1);
});